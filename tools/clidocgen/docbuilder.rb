
class DocumentationBuilder

  def initialize
    @content = ''
  end

  def add_documentation(big_string)
    @content << "#{big_string}\n"
  end

  def add_command(cmdline, no_output: false, allow_fail: false)
    if cmdline.is_a?(Array)
      formatted_cmdline = cmdline.map {|a| a.contains?(' ') ? "\"#{a}\"" : a}.join(' ')
    else
      formatted_cmdline = cmdline
    end
    @content << "```bash\n$ #{formatted_cmdline}\n"

    IO.popen(cmdline, 'r', err: [:child, :out]) do |io|
      all_output = io.read.strip
      unless no_output
        @content << "--------------- <output> ---------------\n#{all_output}\n"
      end
      @content << "\`\`\`\n\n"

      io.close
      code = ($? >> 8).to_i
      if (not allow_fail) and code != 0
        raise "Command '#{cmdline}' failed with code: #{code} output: #{all_output}"
      end
      return {cmd: cmdline, code: code, output: all_output}
    end
  end

  def get_all
    return @content
  end

  def generated_at
    git_hash = `git rev-parse HEAD`
    git_date = `git --no-pager log -n 1 --date=iso-strict --format="%cd"`

    return <<EOF
*Autogenerated at \`\`\`#{git_date.strip} #{git_hash.strip[0..8]}\`\`\`*
EOF
  end

  def generated_with(exe_path)
    git_hash = `git rev-parse HEAD`
    git_date = `git --no-pager log -n 1 --date=iso-strict --format="%cd"`

    return <<EOF
*Autogenerated with \`\`\`#{File.basename exe_path}\`\`\` at \`\`\`#{git_date.strip} #{git_hash.strip[0..8]}\`\`\`*
EOF
  end

  def add_generated_at
    @content << generated_at
  end

  def add_generated_with(exe_path)
    @content << generated_with(exe_path)
  end
end